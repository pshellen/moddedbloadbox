#!/usr/bin/python2.7
import datetime, pytz, time, threading, os, logging, shutil
from hosted import CONFIG, NODE
CONFIG.restart_on_update()

from pyftpdlib.handlers import FTPHandler
from pyftpdlib.servers import FTPServer
from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.filesystems import AbstractedFS, FilesystemError

class RestrictedFS(AbstractedFS):
    def can_access(self, filename):
        return filename == "BLOAD.txt"

    def open(self, filename, mode):
        if not self.can_access(os.path.basename(filename)):
            raise FilesystemError("Cannot access %s. Only BLOAD.txt can be modified" % (
                os.path.basename(filename)))
        if 'w' in mode:
            filename += ".temp"
        return super(RestrictedFS, self).open(filename, mode)

    def remove(self, path):
        if self.can_access(os.path.basename(path)):
            super(RestrictedFS, self).remove(path)

    def listdir(self, path):
        return [
            filename for filename
            in super(RestrictedFS, self).listdir(path)
            if self.can_access(filename)
        ]

class MyHandler(FTPHandler):
    def on_file_received(self, file):
        target = file.replace(".temp", "")
        with open(file, 'rb') as f:
            bload = f.read().decode('windows-1252')
        with open(file, 'wb') as f:
            f.write(bload.encode('utf8'))
        os.rename(file, target)
        shutil.copyfile(target, os.path.join(os.environ['SCRATCH'], os.path.basename(target)))
        os.system("sync")

    def on_incomplete_file_received(self, file):
        os.remove(file)

def current_time():
    now = datetime.datetime.utcnow()
    now = now.replace(tzinfo=pytz.utc)
    now = now.astimezone(pytz.timezone(CONFIG['timezone']))
    now = now.replace(tzinfo=None)
    return now.strftime("%m/%d/%y"), now

def send_clock():
    date, now = current_time()
    NODE.send('/date/set:%s' % date)
    # NODE.send('/date/set:11/12/15')

    since_midnight = (
        now -
        now.replace(hour=0, minute=0, second=0, microsecond=0)
    )
    seconds_since_midnight = since_midnight.seconds + since_midnight.microseconds / 1000000.
    NODE.send('/clock/set:%d' % seconds_since_midnight)

    try:
        s = os.stat("BLOAD.txt")
        bload_age = time.time() - s.st_mtime
        NODE.send('/age/set:%d' % bload_age)
    except:
        pass

def ftp_thread():
    try:
        for fname in ('BLOAD.txt',):
            shutil.copyfile(os.path.join(os.environ['SCRATCH'], fname), fname)
    except Exception:
        import traceback
        traceback.print_exc()

    authorizer = DummyAuthorizer()
    if CONFIG['ftp_password']:
        authorizer.add_user('bload', CONFIG['ftp_password'], homedir='.', perm='elrdw')

    handler = MyHandler
    handler.authorizer = authorizer
    handler.banner = "BLOAD ftp server"
    handler.abstracted_fs = RestrictedFS

    channel = logging.StreamHandler()
    logger = logging.getLogger('pyftpdlib')
    logger.setLevel(logging.DEBUG)
    logger.addHandler(channel)

    server = FTPServer(('0.0.0.0', 2121), handler)
    server.serve_forever()



def main():
    ftp = threading.Thread(target=ftp_thread)
    ftp.daemon = True
    ftp.start()

    while 1:
        send_clock()
        time.sleep(5)

if __name__ == "__main__":
    main()
